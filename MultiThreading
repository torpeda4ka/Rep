package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static com.company.WaitingThread.wait;


public class Main  {
    static int m;
 //  static boolean wait;
    static  double pi;

    public static void main(String[] args) throws InterruptedException, IOException {
        Object sync = new Object();
        Thread t = new Thread(new WaitingThread(sync,wait));
        t.start();
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("1. Продолжить вычисления.");
        System.out.println("2. Приостановить вычисления");
        System.out.println("3. Посмотреть текущий результат.");

        while (true) {
            m = Integer.parseInt(r.readLine());
       //     System.out.println("Main method is running");
            if (m == 1) {
                wait = false;
            }
            if (m == 2) {
                wait = true;
                System.out.println("Stop");
            }
            if (m == 3) {
                System.out.println(pi);
                System.out.println(wait);
            }
        }
    }
}

class WaitingThread extends Main  implements Runnable {
    private final Object sync;
    static boolean wait;
    int n = 0;

    public WaitingThread(Object sync, boolean wait) {
        this.sync = sync;
        this.wait = wait;
    }

    @Override
    public void run() {

        while (true) {

            if (wait) {
                System.out.println("IN IF");
                synchronized (sync) {
                    try {
                        sync.wait();
                    } catch (InterruptedException h) {
                        h.printStackTrace();
                    }

                }

            }

            if (!wait) {
                synchronized (sync) {
                    try {
                        sync.notify();
                      //  System.out.println("Thread is continued");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

            pi = pi + (4 * ((Math.pow(-1, n)) / ((2 * n) + 1)));
            n++;


        }

    }
}

