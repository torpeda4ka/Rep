package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static com.company.WaitingThread.pi;


public class Main  {
    static int m;
   static int wait=2;
   // static boolean continued;
    public static void main(String[] args) throws InterruptedException, IOException {
        Object sync = new Object();
        Thread t = new Thread(new WaitingThread(sync,wait));
        t.start();
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("1. Продолжить вычисления.");
        System.out.println("2. Приостановить вычисления");
        System.out.println("3. Посмотреть текущий результат.");

        while (true) {
            m = Integer.parseInt(r.readLine());
            System.out.println("Main method is running");
            if (m == 1) {
                wait = 1;
            }
            if (m == 2) {
                wait = 0;
            }
            if (m == 3) {
                System.out.println(pi);
            }
        }
    }
}


class WaitingThread extends Main implements Runnable {

   private Object sync ;
    static  double pi;
    int n=0;

    public WaitingThread(Object sync, int wait) {
        this.sync = sync;
        this.wait = wait;

    }

    @Override
    public void run() {

        while (true) {
            if (wait==0) {
                synchronized (sync) {
                    try {
                        sync.wait();
                        System.out.println("Thread is waiting");
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                }
            }


            if (wait==1) {
                synchronized (sync) {
                    try {
                        sync.notify();
                        System.out.println("Thread is continued");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }


            pi = pi + (4 * ((Math.pow(-1, n)) / ((2 * n) + 1)));
            n++;
        }

    }
}
